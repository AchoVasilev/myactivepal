plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.21"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.9.21"
    id("org.jetbrains.kotlin.plugin.jpa") version "1.9.21"

    id("com.google.devtools.ksp") version "1.9.21-1.0.15"

    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.2.1"
    id("io.micronaut.aot") version "4.2.1"
}

ext {
    micronautDataVersion = "4.4.0"
    micronautSerdeVersion = "2.4.0"
    micronautHikariVersion = "5.4.0"
    micronautValidationVersion = "3.10.3"
    micronautFlywayVersion = "6.2.1"
    micronautSpockVersion = "4.1.1"
    micronautInjectGroovyVersion = "4.2.1"
    micronautHttpClientVersion = "4.2.1"
    micronautKotlinRuntime = "4.1.0"

    postgresVersion = "42.7.1"

    jakartaPersistanceVersion = "3.1.0"
    jakartaAnnotationVersion = "2.1.1"

    snakeYmlVersion = "2.2"
    logbackVersion = "1.4.14"

    cloudinaryVersion = "1.36.0"
    javaDotEnvVersion = "5.2.2"
    testContainersVersion = "1.19.3"

    kotlinJacksonVersion = "2.16.1"
}

apply plugin: 'groovy'
apply from: "gradle/migration.gradle"

version = "0.1"
group = "com.project"

repositories {
    mavenCentral()
}

testing {
    suites {
        integration(JvmTestSuite) {
            dependencies {
                implementation project()
            }
            configurations {
                integrationCompileClasspath.extendsFrom testCompileClassPath
                integrationRuntimeClasspath.extendsFrom testRuntimeClasspath
                integrationImplementation.extendsFrom testImplementation
                integrationRuntime.extendsFrom testRuntime
            }
        }
    }
}

dependencies {
    ksp("io.micronaut.serde:micronaut-serde-processor:${micronautSerdeVersion}")
    ksp("io.micronaut.data:micronaut-data-processor:${micronautDataVersion}")

    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")

    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:${micronautKotlinRuntime}")
    implementation("io.micronaut.serde:micronaut-serde-jackson:${micronautSerdeVersion}")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:${micronautDataVersion}")
    implementation("io.micronaut.data:micronaut-data-jdbc:${micronautDataVersion}")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari:${micronautHikariVersion}")
    implementation("io.micronaut.validation:micronaut-validation:${micronautValidationVersion}")
    implementation("io.micronaut.flyway:micronaut-flyway:${micronautFlywayVersion}")

    implementation("jakarta.persistence:jakarta.persistence-api:${jakartaPersistanceVersion}")
    implementation("jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationVersion}")

    implementation("com.cloudinary:cloudinary-core:${cloudinaryVersion}")
    implementation("com.cloudinary:cloudinary-http44:${cloudinaryVersion}")
    implementation("io.github.cdimascio:java-dotenv:${javaDotEnvVersion}")

    implementation platform("org.testcontainers:testcontainers-bom:${testContainersVersion}")

    runtimeOnly("ch.qos.logback:logback-classic:${logbackVersion}")
    runtimeOnly("org.yaml:snakeyaml:${snakeYmlVersion}")
    runtimeOnly("org.postgresql:postgresql:${postgresVersion}")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:${kotlinJacksonVersion}")

    testImplementation("io.micronaut:micronaut-http-client:${micronautHttpClientVersion}")
    testImplementation("io.micronaut:micronaut-inject-groovy:${micronautInjectGroovyVersion}")
    testImplementation("io.micronaut.test:micronaut-test-spock:${micronautSpockVersion}")
    testImplementation("org.testcontainers:postgresql:${testContainersVersion}")
    testImplementation("org.testcontainers:spock:${testContainersVersion}")
}

application {
    mainClass.set("com.project.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

check.dependsOn { testing.suites.integration }

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.project.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}



